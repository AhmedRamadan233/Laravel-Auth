
To upload image
-------------------------------------------------------------------------------------------------------------------------
1 install intervention
    => composer require intervention/image
    => in providers
        => Intervention\Image\ImageServiceProvider::class
    => in alises 
        => 'Image' => Intervention\Image\Facades\Image::class
    => make a publish
        => php artisan vendor:publish --provider="Intervention\Image\ImageServiceProviderLaravelRecent"
    => go to config and filesystem.php take this copy 
        =>  {'public' => [
                'driver' => 'local',
                'root' => storage_path('app/public'),
                'url' => env('APP_URL').'/storage',
                'visibility' => 'public',
                'throw' => false,
                ],
            }
        =>past another one and edit 
        =>  {'images' => [
                'driver' => 'local',
                'root' => storage_path('app/imagesfb'),
                'url' => env('APP_URL').'/imagesfb',
                'visibility' => 'public',
                'throw' => false,
                ],
            }
        => in links in filesystem.php
            =>  'links' => [
                    public_path('storage') => storage_path('app/public'),
                    public_path('imagesfb') => storage_path('app/imagesfb'),
                ],
    =>php artisan storage:link
--------------------------------------------------------------------------------------------------------------------------------
2 make a folder in app has name Traits
    =>in this folder make a file has name ImageProcessiong.php
        =>  <?php
 
namespace App\Traits;
use Image;
use Storage;
use Illuminate\Support\Str; //sring to make a name
// use Intervention\Image\Facades\Image;


trait ImageProcessiong{
    public function get_mime($mime)
    {
        $extensions = [
            'image/jpeg' => '.jpg',
            'image/png' => '.png',
            'image/gif' => '.gif',
            'image/svg+xml' => '.svg',
            'image/tiff' => '.tiff',
            'image/webp' => '.webp',
        ];
        return $extensions[$mime] ?? null;
    }
    //save image
    public function saveImage($image){
        $img =Image::make($image);
        $extensions = $this->get_mime($img->mime());
        $str_random = str::random(8);
        $imagePath = $str_random.time().$extensions;
        $img->save(storage_path('app/imagesfb').'/'.$imagePath);
        return $imagePath;
    }
    // to make size
    public function aspect4resize($image , $width , $height){
        $img =Image::make($image);
        $extensions = $this->get_mime($img->mime());
        $str_random = str::random(8);
        // make a resize
        $img->resize($width , $height , function($constrain){
            $constrain->aspectRatio();
        });
        $imagePath = $str_random.time().$extensions;
        $img->save(storage_path('app/imagesfb').'/'.$imagePath);
        return $imagePath;
    }
    //to make height
    public function aspect4height($image , $width , $height){
        $img =Image::make($image);
        $extensions = $this->get_mime($img->mime());
        $str_random = str::random(8);
        // make a resize
        $img->resize(null , $height , function($constrain){
            $constrain->aspectRatio();
        });

        if($img->width()< $width){
            $img->resize($width , null);
        }
        else if($img->width() > $width){
            $img->crop($width , $height , 0 , 0);
        }
        $imagePath = $str_random.time().$extensions;
        $img->save(storage_path('app/imagesfb').'/'.$imagePath);
        return $imagePath;
    }
    public function saveImageAndThumbnail($Thefile , $thimb=false){
        $dataX = array();
        $dataX['image'] = $this->saveImage($Thefile);
        // Generate thumbnail if required
        if ($thimb) {
            $dataX['thumbnailsm'] = $this->aspect4resize($Thefile, 256, 144);
            $dataX['thumbnailmd'] = $this->aspect4resize($Thefile, 426, 240);
            $dataX['thumbnailxl'] = $this->aspect4resize($Thefile, 640, 360);

        }

        return $dataX;
    }

    public function deleteImage($filePath)
    {
        $imagePath = Storage::disk('imagesfp')->path($filePath);
    
        if (is_file($imagePath) && file_exists($imagePath)) {
            unlink($imagePath);
        }
    }
}
-------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Http\Requests\Auth\ProfileUpdateRequest;
use App\Traits\ImageProcessiong;
class ProfileUpdateController extends Controller
{
    use ImageProcessiong;
    public function update(ProfileUpdateRequest $request)
    {

        $user = $request->user();
        $validatedData = $request->validated();

        if ($request->hasFile('image')) {
            if ($user->image) {
                $this->deleteImage($user->image);
            }
            $validatedData['image'] = $this->saveImage($request->file('image'));
        }
        


        $user->update($validatedData);

        $user = $user->refresh();
        $user->image ? $user->image = $user->image_url : null;
        $success['user'] = $user;
        $success['success'] = true;

        return response()->json($success,200);
    }
}
---------------------------------------------------------
in user model 
    public function getImageUrlAtteribute(){
        return Storage::disk('imagesfp')->url($this->image);
    }


